#include <stdio.h>
#include <stdlib.h>

#define SIZE 3

// Função para inicializar o tabuleiro
void initializeBoard(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            board[i][j] = ' ';
        }
    }
}

// Função para imprimir o tabuleiro
void printBoard(char board[SIZE][SIZE]) {
    printf("\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf(" %c ", board[i][j]);
            if (j < SIZE - 1) printf("|");
        }
        printf("\n");
        if (i < SIZE - 1) printf("---+---+---\n");
    }
    printf("\n");
}

// Função para verificar se há um vencedor
char checkWinner(char board[SIZE][SIZE]) {
    // Verifica linhas e colunas
    for (int i = 0; i < SIZE; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') {
            return board[i][0];
        }
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {
            return board[0][i];
        }
    }

    // Verifica diagonais
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') {
        return board[0][0];
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
        return board[0][2];
    }

    return ' '; // Nenhum vencedor
}

// Função para verificar se o tabuleiro está cheio
int isBoardFull(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == ' ') {
                return 0; // Ainda há espaços vazios
            }
        }
    }
    return 1; // Tabuleiro cheio
}

// Função principal
int main() {
    char board[SIZE][SIZE];
    int row, col;
    char currentPlayer = 'X';

    initializeBoard(board);

    printf("Bem-vindo ao Jogo da Velha!\n\n");

    while (1) {
        printBoard(board);

        printf("Jogador %c, digite sua jogada (linha e coluna, ex: 1 1): ", currentPlayer);
        scanf("%d %d", &row, &col);

        // Verifica se a entrada é válida
        if (row < 1 || row > SIZE || col < 1 || col > SIZE || board[row - 1][col - 1] != ' ') {
            printf("Jogada inválida! Tente novamente.\n");
            continue;
        }

        // Atualiza o tabuleiro
        board[row - 1][col - 1] = currentPlayer;

        // Verifica se há um vencedor
        char winner = checkWinner(board);
        if (winner != ' ') {
            printBoard(board);
            printf("Jogador %c venceu!\n", winner);
            break;
        }

        // Verifica empate
        if (isBoardFull(board)) {
            printBoard(board);
            printf("Empate!\n");
            break;
        }

        // Alterna o jogador
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}
